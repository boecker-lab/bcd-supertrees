import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:2.3.0'
    }
}

//command line interface stuff

dependencies {
    compile project(':flipcut-lib')
    compile 'de.unijena.bioinf.phylo:gscm-lib:1.0.1'
    compile 'de.unijena.bioinf.phylo:gscm-cli:1.0.1'
    compile 'de.unijena.bioinf.phylo:phyloTree-lib.utils:0.9.9'
    compile 'de.unijena.bioinf.phylo:phyloTree-lib.cli:0.9.9'
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "1.7.12"


    testCompile 'com.github.stefanbirkner:system-rules:1.5.0'
}


project.ext.set("mainClassName", "phylo.tree.algorithm.flipcut.BCDSupertrees")

jar {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

apply plugin: "eu.appsatori.fatjar"

fatJar {
    baseName = "${project.baseName}"
    classifier 'fat'
    with jar
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
fatJarPrepareFiles.dependsOn jar

fatJar.doLast {
    File file = project.tasks.fatJar.outputs.files.singleFile;
    java.nio.file.Path nu = file.toPath().getParent().toAbsolutePath().resolve("${project.jarName}");
    java.nio.file.Files.copy(file.toPath(), nu, StandardCopyOption.REPLACE_EXISTING);
}

def linSuffix = '-Nix'
def winSuffix = '-Win'
def jarSuffix = '-Jar'


apply plugin: 'edu.sc.seis.launch4j'

//createExe.dependsOn fatJar
launch4j {
    outfile = 'bcdSupertrees.exe'
    mainClassName = project.mainClassName
    copyConfigurable = project.tasks.fatJar.outputs.files
    jar = "lib/${project.tasks.fatJar.archiveName}"
    headerType = "console"
}


apply plugin: 'distribution'

task distribute { group = 'distribution' }


distributions {
    File fatJarFile = project.tasks.fatJar.outputs.files.singleFile.toPath().getParent().toAbsolutePath().resolve("${project.jarName}").toFile();
    jar {
        baseName = "${project.baseName}$jarSuffix"
        contents {
            from("${project.distPath}") {
                exclude('bcd')
                exclude('bcdVM')
            }
            from("${project.readmePath}")
            from("${project.copyingPath}")
            from("${project.licensePath}")
            from { fatJarFile }
        }
    }

    linux {
        baseName = "${project.baseName}$linSuffix"
        contents {
            from("${project.distPath}")
            from("${project.readmePath}")
            from("${project.copyingPath}")
            from("${project.licensePath}")
            from { fatJarFile }
        }
    }

    win {
        baseName = "${project.baseName}$winSuffix"
        contents {
            from("${project.distPath}") {
                exclude('bcd')
                exclude('bcdVM')
            }
            from("${project.readmePath}")
            from("${project.copyingPath}")
            from("${project.licensePath}")
            from('build/launch4j') {
                include("*.exe")
            }
        }
    }
}

//getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
project.getTasksByName("distTar", false).each { it.setEnabled(false) }
project.getTasksByName("distZip", false).each { it.setEnabled(false) }


distribute.dependsOn 'linuxDistZip', 'winDistZip', 'jarDistZip'

linuxDistZip.doLast {
    File file = project.tasks.jarDistZip.outputs.files.singleFile
    println(file)
    file.renameTo(file.toString().replace((jarSuffix + "-" + version + "."), "-" + version + jarSuffix + "."))
}


linuxDistZip.doLast {
    File file = project.tasks.linuxDistZip.outputs.files.singleFile
    println(file)
    file.renameTo(file.toString().replace((linSuffix + "-" + version + "."), "-" + version + linSuffix + "."))
}

winDistZip.doLast {
    File file = project.tasks.winDistZip.outputs.files.singleFile
    println(file)
    file.renameTo(file.toString().replace((winSuffix + "-" + version + "."), "-" + version + winSuffix + "."))
}

jarDistZip.dependsOn 'fatJar'
jarDistTar.dependsOn 'fatJar'
installJarDist.dependsOn 'fatJar'

linuxDistZip.dependsOn 'fatJar'
linuxDistTar.dependsOn 'fatJar'
installLinuxDist.dependsOn 'fatJar'

winDistZip.dependsOn 'createExe'
winDistTar.dependsOn 'createExe'
installWinDist.dependsOn 'createExe'

/*
// what should be published
publishing {
    publications {
        bcd(MavenPublication) {
            artifactId "$name"
            groupId "$group"
            artifact source: winDistZip, classifier: 'win', extension: 'zip'
            artifact source: linuxDistZip, classifier: 'nix', extension: 'zip'
            artifact source: distZip, classifier: 'jar', extension: 'zip'

        }

    }
}

artifactoryPublish.dependsOn 'distribute'
*/


















